# Create a draft release and attach mservctl binaries

name: Draft release

on:
  push:
    branches:
      - wftest/*
    tags:
      - "v*"

env:
  BINARY_NAME: mservctl

jobs:
  build:
    name: Build the 'mservctl' CLI binary

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        arch: [amd64]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v1
        with:
          go-version: "1.15"

      - name: Update 'make' on Linux
        run: |
          sudo apt-get update
          sudo apt-get --only-upgrade install build-essential
        if: ${{ matrix.platform == 'ubuntu-latest' }}

      - name: Install 'make' on macOS
        run: |
          brew install make
          echo "/usr/local/opt/make/libexec/gnubin" >> $GITHUB_PATH
        if: ${{ matrix.platform == 'macos-latest' }}

      - name: Build the CLI binary
        run: make build-cli

      - name: Upload ${{ runner.os }} ${{ matrix.arch }} binary
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.BINARY_NAME }}.${{ runner.os }}.${{ matrix.arch }}
          path: mservctl/${{ env.BINARY_NAME }}

  release:
    needs: [build]

    name: Create a draft release, and attach the built binaries

    runs-on: ubuntu-latest

    steps:
      - uses: actions/create-release@v1
        id: draft-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true

      - uses: actions/download-artifact@v1
        with:
          name: ${{ env.BINARY_NAME }}.Linux.amd64

      - name: Attach Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft-release.outputs.upload_url }}
          asset_path: ./${{ env.BINARY_NAME }}.Linux.amd64/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}.linux.amd64
          asset_content_type: application/octet-stream

      - uses: actions/download-artifact@v1
        with:
          name: ${{ env.BINARY_NAME }}.macos.amd64

      - name: Attach macOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft-release.outputs.upload_url }}
          asset_path: ./${{ env.BINARY_NAME }}.macos.amd64/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}.macos.amd64
          asset_content_type: application/octet-stream
