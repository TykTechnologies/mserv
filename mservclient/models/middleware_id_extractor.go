// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MiddlewareIDExtractor middleware Id extractor
//
// swagger:model MiddlewareIdExtractor
type MiddlewareIDExtractor struct {

	// extractor config
	ExtractorConfig map[string]interface{} `json:"extractor_config,omitempty"`

	// extract from
	ExtractFrom IDExtractorSource `json:"extract_from,omitempty"`

	// extract with
	ExtractWith IDExtractorType `json:"extract_with,omitempty"`
}

// Validate validates this middleware Id extractor
func (m *MiddlewareIDExtractor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtractFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtractWith(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MiddlewareIDExtractor) validateExtractFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtractFrom) { // not required
		return nil
	}

	if err := m.ExtractFrom.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extract_from")
		}
		return err
	}

	return nil
}

func (m *MiddlewareIDExtractor) validateExtractWith(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtractWith) { // not required
		return nil
	}

	if err := m.ExtractWith.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extract_with")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MiddlewareIDExtractor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MiddlewareIDExtractor) UnmarshalBinary(b []byte) error {
	var res MiddlewareIDExtractor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
