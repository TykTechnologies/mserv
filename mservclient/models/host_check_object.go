// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HostCheckObject host check object
//
// swagger:model HostCheckObject
type HostCheckObject struct {

	// body
	Body string `json:"body,omitempty"`

	// check URL
	CheckURL string `json:"url,omitempty"`

	// commands
	Commands []*CheckCommand `json:"commands"`

	// enable proxy protocol
	EnableProxyProtocol bool `json:"enable_proxy_protocol,omitempty"`

	// headers
	Headers map[string]string `json:"headers,omitempty"`

	// method
	Method string `json:"method,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// timeout
	Timeout Duration `json:"timeout,omitempty"`
}

// Validate validates this host check object
func (m *HostCheckObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostCheckObject) validateCommands(formats strfmt.Registry) error {
	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	for i := 0; i < len(m.Commands); i++ {
		if swag.IsZero(m.Commands[i]) { // not required
			continue
		}

		if m.Commands[i] != nil {
			if err := m.Commands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HostCheckObject) validateTimeout(formats strfmt.Registry) error {
	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := m.Timeout.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeout")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeout")
		}
		return err
	}

	return nil
}

// ContextValidate validate this host check object based on the context it is used
func (m *HostCheckObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostCheckObject) contextValidateCommands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Commands); i++ {

		if m.Commands[i] != nil {

			if swag.IsZero(m.Commands[i]) { // not required
				return nil
			}

			if err := m.Commands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HostCheckObject) contextValidateTimeout(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := m.Timeout.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeout")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeout")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostCheckObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostCheckObject) UnmarshalBinary(b []byte) error {
	var res HostCheckObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
