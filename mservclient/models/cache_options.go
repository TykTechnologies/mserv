// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CacheOptions cache options
//
// swagger:model CacheOptions
type CacheOptions struct {

	// cache all safe requests
	CacheAllSafeRequests bool `json:"cache_all_safe_requests,omitempty"`

	// cache control TTL header
	CacheControlTTLHeader string `json:"cache_control_ttl_header,omitempty"`

	// cache only response codes
	CacheOnlyResponseCodes []int64 `json:"cache_response_codes"`

	// cache timeout
	CacheTimeout int64 `json:"cache_timeout,omitempty"`

	// enable cache
	EnableCache bool `json:"enable_cache,omitempty"`

	// enable upstream cache control
	EnableUpstreamCacheControl bool `json:"enable_upstream_cache_control,omitempty"`
}

// Validate validates this cache options
func (m *CacheOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cache options based on context it is used
func (m *CacheOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CacheOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CacheOptions) UnmarshalBinary(b []byte) error {
	var res CacheOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
