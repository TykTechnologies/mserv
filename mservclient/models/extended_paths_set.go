// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExtendedPathsSet extended paths set
//
// swagger:model ExtendedPathsSet
type ExtendedPathsSet struct {

	// advance cache config
	AdvanceCacheConfig []*CacheMeta `json:"advance_cache_config"`

	// black list
	BlackList []*EndPointMeta `json:"black_list"`

	// cached
	Cached []string `json:"cache"`

	// circuit breaker
	CircuitBreaker []*CircuitBreakerMeta `json:"circuit_breakers"`

	// do not track endpoints
	DoNotTrackEndpoints []*TrackEndpointMeta `json:"do_not_track_endpoints"`

	// hard timeouts
	HardTimeouts []*HardTimeoutMeta `json:"hard_timeouts"`

	// ignored
	Ignored []*EndPointMeta `json:"ignored"`

	// internal
	Internal []*InternalMeta `json:"internal"`

	// method transforms
	MethodTransforms []*MethodTransformMeta `json:"method_transforms"`

	// size limit
	SizeLimit []*RequestSizeMeta `json:"size_limits"`

	// track endpoints
	TrackEndpoints []*TrackEndpointMeta `json:"track_endpoints"`

	// transform
	Transform []*TemplateMeta `json:"transform"`

	// transform header
	TransformHeader []*HeaderInjectionMeta `json:"transform_headers"`

	// transform j q
	TransformJQ []*TransformJQMeta `json:"transform_jq"`

	// transform j q response
	TransformJQResponse []*TransformJQMeta `json:"transform_jq_response"`

	// transform response
	TransformResponse []*TemplateMeta `json:"transform_response"`

	// transform response header
	TransformResponseHeader []*HeaderInjectionMeta `json:"transform_response_headers"`

	// URL rewrite
	URLRewrite []*URLRewriteMeta `json:"url_rewrites"`

	// validate JSON
	ValidateJSON []*ValidatePathMeta `json:"validate_json"`

	// virtual
	Virtual []*VirtualMeta `json:"virtual"`

	// white list
	WhiteList []*EndPointMeta `json:"white_list"`
}

// Validate validates this extended paths set
func (m *ExtendedPathsSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvanceCacheConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlackList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCircuitBreaker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoNotTrackEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardTimeouts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnored(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethodTransforms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformJQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformJQResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformResponseHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLRewrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidateJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtual(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhiteList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedPathsSet) validateAdvanceCacheConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvanceCacheConfig) { // not required
		return nil
	}

	for i := 0; i < len(m.AdvanceCacheConfig); i++ {
		if swag.IsZero(m.AdvanceCacheConfig[i]) { // not required
			continue
		}

		if m.AdvanceCacheConfig[i] != nil {
			if err := m.AdvanceCacheConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advance_cache_config" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advance_cache_config" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateBlackList(formats strfmt.Registry) error {
	if swag.IsZero(m.BlackList) { // not required
		return nil
	}

	for i := 0; i < len(m.BlackList); i++ {
		if swag.IsZero(m.BlackList[i]) { // not required
			continue
		}

		if m.BlackList[i] != nil {
			if err := m.BlackList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("black_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("black_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateCircuitBreaker(formats strfmt.Registry) error {
	if swag.IsZero(m.CircuitBreaker) { // not required
		return nil
	}

	for i := 0; i < len(m.CircuitBreaker); i++ {
		if swag.IsZero(m.CircuitBreaker[i]) { // not required
			continue
		}

		if m.CircuitBreaker[i] != nil {
			if err := m.CircuitBreaker[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("circuit_breakers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("circuit_breakers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateDoNotTrackEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.DoNotTrackEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.DoNotTrackEndpoints); i++ {
		if swag.IsZero(m.DoNotTrackEndpoints[i]) { // not required
			continue
		}

		if m.DoNotTrackEndpoints[i] != nil {
			if err := m.DoNotTrackEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("do_not_track_endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("do_not_track_endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateHardTimeouts(formats strfmt.Registry) error {
	if swag.IsZero(m.HardTimeouts) { // not required
		return nil
	}

	for i := 0; i < len(m.HardTimeouts); i++ {
		if swag.IsZero(m.HardTimeouts[i]) { // not required
			continue
		}

		if m.HardTimeouts[i] != nil {
			if err := m.HardTimeouts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hard_timeouts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hard_timeouts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateIgnored(formats strfmt.Registry) error {
	if swag.IsZero(m.Ignored) { // not required
		return nil
	}

	for i := 0; i < len(m.Ignored); i++ {
		if swag.IsZero(m.Ignored[i]) { // not required
			continue
		}

		if m.Ignored[i] != nil {
			if err := m.Ignored[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ignored" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ignored" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateInternal(formats strfmt.Registry) error {
	if swag.IsZero(m.Internal) { // not required
		return nil
	}

	for i := 0; i < len(m.Internal); i++ {
		if swag.IsZero(m.Internal[i]) { // not required
			continue
		}

		if m.Internal[i] != nil {
			if err := m.Internal[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internal" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internal" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateMethodTransforms(formats strfmt.Registry) error {
	if swag.IsZero(m.MethodTransforms) { // not required
		return nil
	}

	for i := 0; i < len(m.MethodTransforms); i++ {
		if swag.IsZero(m.MethodTransforms[i]) { // not required
			continue
		}

		if m.MethodTransforms[i] != nil {
			if err := m.MethodTransforms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("method_transforms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("method_transforms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateSizeLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.SizeLimit) { // not required
		return nil
	}

	for i := 0; i < len(m.SizeLimit); i++ {
		if swag.IsZero(m.SizeLimit[i]) { // not required
			continue
		}

		if m.SizeLimit[i] != nil {
			if err := m.SizeLimit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("size_limits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("size_limits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateTrackEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.TrackEndpoints); i++ {
		if swag.IsZero(m.TrackEndpoints[i]) { // not required
			continue
		}

		if m.TrackEndpoints[i] != nil {
			if err := m.TrackEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("track_endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("track_endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateTransform(formats strfmt.Registry) error {
	if swag.IsZero(m.Transform) { // not required
		return nil
	}

	for i := 0; i < len(m.Transform); i++ {
		if swag.IsZero(m.Transform[i]) { // not required
			continue
		}

		if m.Transform[i] != nil {
			if err := m.Transform[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateTransformHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.TransformHeader) { // not required
		return nil
	}

	for i := 0; i < len(m.TransformHeader); i++ {
		if swag.IsZero(m.TransformHeader[i]) { // not required
			continue
		}

		if m.TransformHeader[i] != nil {
			if err := m.TransformHeader[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateTransformJQ(formats strfmt.Registry) error {
	if swag.IsZero(m.TransformJQ) { // not required
		return nil
	}

	for i := 0; i < len(m.TransformJQ); i++ {
		if swag.IsZero(m.TransformJQ[i]) { // not required
			continue
		}

		if m.TransformJQ[i] != nil {
			if err := m.TransformJQ[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_jq" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_jq" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateTransformJQResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.TransformJQResponse) { // not required
		return nil
	}

	for i := 0; i < len(m.TransformJQResponse); i++ {
		if swag.IsZero(m.TransformJQResponse[i]) { // not required
			continue
		}

		if m.TransformJQResponse[i] != nil {
			if err := m.TransformJQResponse[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_jq_response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_jq_response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateTransformResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.TransformResponse) { // not required
		return nil
	}

	for i := 0; i < len(m.TransformResponse); i++ {
		if swag.IsZero(m.TransformResponse[i]) { // not required
			continue
		}

		if m.TransformResponse[i] != nil {
			if err := m.TransformResponse[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateTransformResponseHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.TransformResponseHeader) { // not required
		return nil
	}

	for i := 0; i < len(m.TransformResponseHeader); i++ {
		if swag.IsZero(m.TransformResponseHeader[i]) { // not required
			continue
		}

		if m.TransformResponseHeader[i] != nil {
			if err := m.TransformResponseHeader[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_response_headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_response_headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateURLRewrite(formats strfmt.Registry) error {
	if swag.IsZero(m.URLRewrite) { // not required
		return nil
	}

	for i := 0; i < len(m.URLRewrite); i++ {
		if swag.IsZero(m.URLRewrite[i]) { // not required
			continue
		}

		if m.URLRewrite[i] != nil {
			if err := m.URLRewrite[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("url_rewrites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("url_rewrites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateValidateJSON(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidateJSON) { // not required
		return nil
	}

	for i := 0; i < len(m.ValidateJSON); i++ {
		if swag.IsZero(m.ValidateJSON[i]) { // not required
			continue
		}

		if m.ValidateJSON[i] != nil {
			if err := m.ValidateJSON[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validate_json" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validate_json" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateVirtual(formats strfmt.Registry) error {
	if swag.IsZero(m.Virtual) { // not required
		return nil
	}

	for i := 0; i < len(m.Virtual); i++ {
		if swag.IsZero(m.Virtual[i]) { // not required
			continue
		}

		if m.Virtual[i] != nil {
			if err := m.Virtual[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtual" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtual" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) validateWhiteList(formats strfmt.Registry) error {
	if swag.IsZero(m.WhiteList) { // not required
		return nil
	}

	for i := 0; i < len(m.WhiteList); i++ {
		if swag.IsZero(m.WhiteList[i]) { // not required
			continue
		}

		if m.WhiteList[i] != nil {
			if err := m.WhiteList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("white_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("white_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this extended paths set based on the context it is used
func (m *ExtendedPathsSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvanceCacheConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlackList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCircuitBreaker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDoNotTrackEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHardTimeouts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIgnored(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMethodTransforms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSizeLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransformHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransformJQ(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransformJQResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransformResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransformResponseHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURLRewrite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidateJSON(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtual(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhiteList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedPathsSet) contextValidateAdvanceCacheConfig(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdvanceCacheConfig); i++ {

		if m.AdvanceCacheConfig[i] != nil {

			if swag.IsZero(m.AdvanceCacheConfig[i]) { // not required
				return nil
			}

			if err := m.AdvanceCacheConfig[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advance_cache_config" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advance_cache_config" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateBlackList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlackList); i++ {

		if m.BlackList[i] != nil {

			if swag.IsZero(m.BlackList[i]) { // not required
				return nil
			}

			if err := m.BlackList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("black_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("black_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateCircuitBreaker(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CircuitBreaker); i++ {

		if m.CircuitBreaker[i] != nil {

			if swag.IsZero(m.CircuitBreaker[i]) { // not required
				return nil
			}

			if err := m.CircuitBreaker[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("circuit_breakers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("circuit_breakers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateDoNotTrackEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DoNotTrackEndpoints); i++ {

		if m.DoNotTrackEndpoints[i] != nil {

			if swag.IsZero(m.DoNotTrackEndpoints[i]) { // not required
				return nil
			}

			if err := m.DoNotTrackEndpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("do_not_track_endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("do_not_track_endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateHardTimeouts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HardTimeouts); i++ {

		if m.HardTimeouts[i] != nil {

			if swag.IsZero(m.HardTimeouts[i]) { // not required
				return nil
			}

			if err := m.HardTimeouts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hard_timeouts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hard_timeouts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateIgnored(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ignored); i++ {

		if m.Ignored[i] != nil {

			if swag.IsZero(m.Ignored[i]) { // not required
				return nil
			}

			if err := m.Ignored[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ignored" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ignored" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateInternal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Internal); i++ {

		if m.Internal[i] != nil {

			if swag.IsZero(m.Internal[i]) { // not required
				return nil
			}

			if err := m.Internal[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internal" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internal" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateMethodTransforms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MethodTransforms); i++ {

		if m.MethodTransforms[i] != nil {

			if swag.IsZero(m.MethodTransforms[i]) { // not required
				return nil
			}

			if err := m.MethodTransforms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("method_transforms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("method_transforms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateSizeLimit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SizeLimit); i++ {

		if m.SizeLimit[i] != nil {

			if swag.IsZero(m.SizeLimit[i]) { // not required
				return nil
			}

			if err := m.SizeLimit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("size_limits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("size_limits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateTrackEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrackEndpoints); i++ {

		if m.TrackEndpoints[i] != nil {

			if swag.IsZero(m.TrackEndpoints[i]) { // not required
				return nil
			}

			if err := m.TrackEndpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("track_endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("track_endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateTransform(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transform); i++ {

		if m.Transform[i] != nil {

			if swag.IsZero(m.Transform[i]) { // not required
				return nil
			}

			if err := m.Transform[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateTransformHeader(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransformHeader); i++ {

		if m.TransformHeader[i] != nil {

			if swag.IsZero(m.TransformHeader[i]) { // not required
				return nil
			}

			if err := m.TransformHeader[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateTransformJQ(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransformJQ); i++ {

		if m.TransformJQ[i] != nil {

			if swag.IsZero(m.TransformJQ[i]) { // not required
				return nil
			}

			if err := m.TransformJQ[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_jq" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_jq" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateTransformJQResponse(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransformJQResponse); i++ {

		if m.TransformJQResponse[i] != nil {

			if swag.IsZero(m.TransformJQResponse[i]) { // not required
				return nil
			}

			if err := m.TransformJQResponse[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_jq_response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_jq_response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateTransformResponse(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransformResponse); i++ {

		if m.TransformResponse[i] != nil {

			if swag.IsZero(m.TransformResponse[i]) { // not required
				return nil
			}

			if err := m.TransformResponse[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateTransformResponseHeader(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransformResponseHeader); i++ {

		if m.TransformResponseHeader[i] != nil {

			if swag.IsZero(m.TransformResponseHeader[i]) { // not required
				return nil
			}

			if err := m.TransformResponseHeader[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transform_response_headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transform_response_headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateURLRewrite(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.URLRewrite); i++ {

		if m.URLRewrite[i] != nil {

			if swag.IsZero(m.URLRewrite[i]) { // not required
				return nil
			}

			if err := m.URLRewrite[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("url_rewrites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("url_rewrites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateValidateJSON(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ValidateJSON); i++ {

		if m.ValidateJSON[i] != nil {

			if swag.IsZero(m.ValidateJSON[i]) { // not required
				return nil
			}

			if err := m.ValidateJSON[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validate_json" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validate_json" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateVirtual(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Virtual); i++ {

		if m.Virtual[i] != nil {

			if swag.IsZero(m.Virtual[i]) { // not required
				return nil
			}

			if err := m.Virtual[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtual" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtual" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExtendedPathsSet) contextValidateWhiteList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WhiteList); i++ {

		if m.WhiteList[i] != nil {

			if swag.IsZero(m.WhiteList[i]) { // not required
				return nil
			}

			if err := m.WhiteList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("white_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("white_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtendedPathsSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtendedPathsSet) UnmarshalBinary(b []byte) error {
	var res ExtendedPathsSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
