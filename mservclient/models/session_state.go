// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionState session state
//
// swagger:model SessionState
type SessionState struct {

	// access rights
	AccessRights map[string]AccessDefinition `json:"access_rights,omitempty"`

	// alias
	Alias string `json:"alias,omitempty"`

	// allowance
	Allowance float64 `json:"allowance,omitempty"`

	// apply policies
	ApplyPolicies []string `json:"apply_policies"`

	// apply policy Id
	ApplyPolicyID string `json:"apply_policy_id,omitempty"`

	// certificate
	Certificate string `json:"certificate,omitempty"`

	// data expires
	DataExpires int64 `json:"data_expires,omitempty"`

	// enable detailed recording
	EnableDetailedRecording bool `json:"enable_detailed_recording,omitempty"`

	// expires
	Expires int64 `json:"expires,omitempty"`

	// hmac enabled
	HmacEnabled bool `json:"hmac_enabled,omitempty"`

	// hmac secret
	HmacSecret string `json:"hmac_secret,omitempty"`

	// Id extractor deadline
	IDExtractorDeadline int64 `json:"id_extractor_deadline,omitempty"`

	// is inactive
	IsInactive bool `json:"is_inactive,omitempty"`

	// last check
	LastCheck int64 `json:"last_check,omitempty"`

	// last updated
	LastUpdated string `json:"last_updated,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// oauth client Id
	OauthClientID string `json:"oauth_client_id,omitempty"`

	// oauth keys
	OauthKeys map[string]string `json:"oauth_keys,omitempty"`

	// org Id
	OrgID string `json:"org_id,omitempty"`

	// per
	Per float64 `json:"per,omitempty"`

	// quota max
	QuotaMax int64 `json:"quota_max,omitempty"`

	// quota remaining
	QuotaRemaining int64 `json:"quota_remaining,omitempty"`

	// quota renewal rate
	QuotaRenewalRate int64 `json:"quota_renewal_rate,omitempty"`

	// quota renews
	QuotaRenews int64 `json:"quota_renews,omitempty"`

	// rate
	Rate float64 `json:"rate,omitempty"`

	// session lifetime
	SessionLifetime int64 `json:"session_lifetime,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// basic auth data
	BasicAuthData *BasicAuthData `json:"basic_auth_data,omitempty"`

	// jwt data
	JwtData *JWTData `json:"jwt_data,omitempty"`

	// monitor
	Monitor *Monitor `json:"monitor,omitempty"`
}

// Validate validates this session state
func (m *SessionState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessRights(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasicAuthData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwtData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionState) validateAccessRights(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessRights) { // not required
		return nil
	}

	for k := range m.AccessRights {

		if err := validate.Required("access_rights"+"."+k, "body", m.AccessRights[k]); err != nil {
			return err
		}
		if val, ok := m.AccessRights[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SessionState) validateBasicAuthData(formats strfmt.Registry) error {

	if swag.IsZero(m.BasicAuthData) { // not required
		return nil
	}

	if m.BasicAuthData != nil {
		if err := m.BasicAuthData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basic_auth_data")
			}
			return err
		}
	}

	return nil
}

func (m *SessionState) validateJwtData(formats strfmt.Registry) error {

	if swag.IsZero(m.JwtData) { // not required
		return nil
	}

	if m.JwtData != nil {
		if err := m.JwtData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwt_data")
			}
			return err
		}
	}

	return nil
}

func (m *SessionState) validateMonitor(formats strfmt.Registry) error {

	if swag.IsZero(m.Monitor) { // not required
		return nil
	}

	if m.Monitor != nil {
		if err := m.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionState) UnmarshalBinary(b []byte) error {
	var res SessionState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
