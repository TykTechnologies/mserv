// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APILimit APILimit stores quota and rate limit on ACL level (per API)
//
// swagger:model APILimit
type APILimit struct {

	// per
	Per float64 `json:"per,omitempty"`

	// quota max
	QuotaMax int64 `json:"quota_max,omitempty"`

	// quota remaining
	QuotaRemaining int64 `json:"quota_remaining,omitempty"`

	// quota renewal rate
	QuotaRenewalRate int64 `json:"quota_renewal_rate,omitempty"`

	// quota renews
	QuotaRenews int64 `json:"quota_renews,omitempty"`

	// rate
	Rate float64 `json:"rate,omitempty"`

	// throttle interval
	ThrottleInterval float64 `json:"throttle_interval,omitempty"`

	// throttle retry limit
	ThrottleRetryLimit int64 `json:"throttle_retry_limit,omitempty"`
}

// Validate validates this API limit
func (m *APILimit) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this API limit based on context it is used
func (m *APILimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APILimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APILimit) UnmarshalBinary(b []byte) error {
	var res APILimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
