// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VersionInfo version info
//
// swagger:model VersionInfo
type VersionInfo struct {

	// expires
	Expires string `json:"expires,omitempty"`

	// global headers
	GlobalHeaders map[string]string `json:"global_headers,omitempty"`

	// global headers remove
	GlobalHeadersRemove []string `json:"global_headers_remove"`

	// global size limit
	GlobalSizeLimit int64 `json:"global_size_limit,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// override target
	OverrideTarget string `json:"override_target,omitempty"`

	// use extended paths
	UseExtendedPaths bool `json:"use_extended_paths,omitempty"`

	// extended paths
	ExtendedPaths *ExtendedPathsSet `json:"extended_paths,omitempty"`

	// paths
	Paths *Paths `json:"paths,omitempty"`
}

// Validate validates this version info
func (m *VersionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtendedPaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionInfo) validateExtendedPaths(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendedPaths) { // not required
		return nil
	}

	if m.ExtendedPaths != nil {
		if err := m.ExtendedPaths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extended_paths")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extended_paths")
			}
			return err
		}
	}

	return nil
}

func (m *VersionInfo) validatePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	if m.Paths != nil {
		if err := m.Paths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paths")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paths")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this version info based on the context it is used
func (m *VersionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtendedPaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionInfo) contextValidateExtendedPaths(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtendedPaths != nil {

		if swag.IsZero(m.ExtendedPaths) { // not required
			return nil
		}

		if err := m.ExtendedPaths.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extended_paths")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extended_paths")
			}
			return err
		}
	}

	return nil
}

func (m *VersionInfo) contextValidatePaths(ctx context.Context, formats strfmt.Registry) error {

	if m.Paths != nil {

		if swag.IsZero(m.Paths) { // not required
			return nil
		}

		if err := m.Paths.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paths")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paths")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionInfo) UnmarshalBinary(b []byte) error {
	var res VersionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Paths paths
//
// swagger:model Paths
type Paths struct {

	// black list
	BlackList []string `json:"black_list"`

	// ignored
	Ignored []string `json:"ignored"`

	// white list
	WhiteList []string `json:"white_list"`
}

// Validate validates this paths
func (m *Paths) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this paths based on context it is used
func (m *Paths) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Paths) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Paths) UnmarshalBinary(b []byte) error {
	var res Paths
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
