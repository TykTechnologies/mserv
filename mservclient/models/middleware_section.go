// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MiddlewareSection middleware section
//
// swagger:model MiddlewareSection
type MiddlewareSection struct {

	// post
	Post []*MiddlewareDefinition `json:"post"`

	// post key auth
	PostKeyAuth []*MiddlewareDefinition `json:"post_key_auth"`

	// pre
	Pre []*MiddlewareDefinition `json:"pre"`

	// response
	Response []*MiddlewareDefinition `json:"response"`

	// auth check
	AuthCheck *MiddlewareDefinition `json:"auth_check,omitempty"`

	// driver
	Driver MiddlewareDriver `json:"driver,omitempty"`

	// id extractor
	IDExtractor *MiddlewareIDExtractor `json:"id_extractor,omitempty"`
}

// Validate validates this middleware section
func (m *MiddlewareSection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostKeyAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePre(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDExtractor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MiddlewareSection) validatePost(formats strfmt.Registry) error {
	if swag.IsZero(m.Post) { // not required
		return nil
	}

	for i := 0; i < len(m.Post); i++ {
		if swag.IsZero(m.Post[i]) { // not required
			continue
		}

		if m.Post[i] != nil {
			if err := m.Post[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("post" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("post" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) validatePostKeyAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.PostKeyAuth) { // not required
		return nil
	}

	for i := 0; i < len(m.PostKeyAuth); i++ {
		if swag.IsZero(m.PostKeyAuth[i]) { // not required
			continue
		}

		if m.PostKeyAuth[i] != nil {
			if err := m.PostKeyAuth[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("post_key_auth" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("post_key_auth" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) validatePre(formats strfmt.Registry) error {
	if swag.IsZero(m.Pre) { // not required
		return nil
	}

	for i := 0; i < len(m.Pre); i++ {
		if swag.IsZero(m.Pre[i]) { // not required
			continue
		}

		if m.Pre[i] != nil {
			if err := m.Pre[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pre" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pre" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.Response) { // not required
		return nil
	}

	for i := 0; i < len(m.Response); i++ {
		if swag.IsZero(m.Response[i]) { // not required
			continue
		}

		if m.Response[i] != nil {
			if err := m.Response[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) validateAuthCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthCheck) { // not required
		return nil
	}

	if m.AuthCheck != nil {
		if err := m.AuthCheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_check")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_check")
			}
			return err
		}
	}

	return nil
}

func (m *MiddlewareSection) validateDriver(formats strfmt.Registry) error {
	if swag.IsZero(m.Driver) { // not required
		return nil
	}

	if err := m.Driver.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("driver")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("driver")
		}
		return err
	}

	return nil
}

func (m *MiddlewareSection) validateIDExtractor(formats strfmt.Registry) error {
	if swag.IsZero(m.IDExtractor) { // not required
		return nil
	}

	if m.IDExtractor != nil {
		if err := m.IDExtractor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id_extractor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id_extractor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this middleware section based on the context it is used
func (m *MiddlewareSection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostKeyAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePre(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthCheck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIDExtractor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MiddlewareSection) contextValidatePost(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Post); i++ {

		if m.Post[i] != nil {

			if swag.IsZero(m.Post[i]) { // not required
				return nil
			}

			if err := m.Post[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("post" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("post" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) contextValidatePostKeyAuth(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PostKeyAuth); i++ {

		if m.PostKeyAuth[i] != nil {

			if swag.IsZero(m.PostKeyAuth[i]) { // not required
				return nil
			}

			if err := m.PostKeyAuth[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("post_key_auth" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("post_key_auth" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) contextValidatePre(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pre); i++ {

		if m.Pre[i] != nil {

			if swag.IsZero(m.Pre[i]) { // not required
				return nil
			}

			if err := m.Pre[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pre" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pre" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Response); i++ {

		if m.Response[i] != nil {

			if swag.IsZero(m.Response[i]) { // not required
				return nil
			}

			if err := m.Response[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MiddlewareSection) contextValidateAuthCheck(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthCheck != nil {

		if swag.IsZero(m.AuthCheck) { // not required
			return nil
		}

		if err := m.AuthCheck.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_check")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_check")
			}
			return err
		}
	}

	return nil
}

func (m *MiddlewareSection) contextValidateDriver(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Driver) { // not required
		return nil
	}

	if err := m.Driver.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("driver")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("driver")
		}
		return err
	}

	return nil
}

func (m *MiddlewareSection) contextValidateIDExtractor(ctx context.Context, formats strfmt.Registry) error {

	if m.IDExtractor != nil {

		if swag.IsZero(m.IDExtractor) { // not required
			return nil
		}

		if err := m.IDExtractor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id_extractor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id_extractor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MiddlewareSection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MiddlewareSection) UnmarshalBinary(b []byte) error {
	var res MiddlewareSection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
