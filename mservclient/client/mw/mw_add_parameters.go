// Code generated by go-swagger; DO NOT EDIT.

package mw

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMwAddParams creates a new MwAddParams object
// with the default values initialized.
func NewMwAddParams() *MwAddParams {
	var ()
	return &MwAddParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMwAddParamsWithTimeout creates a new MwAddParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMwAddParamsWithTimeout(timeout time.Duration) *MwAddParams {
	var ()
	return &MwAddParams{

		timeout: timeout,
	}
}

// NewMwAddParamsWithContext creates a new MwAddParams object
// with the default values initialized, and the ability to set a context for a request
func NewMwAddParamsWithContext(ctx context.Context) *MwAddParams {
	var ()
	return &MwAddParams{

		Context: ctx,
	}
}

// NewMwAddParamsWithHTTPClient creates a new MwAddParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMwAddParamsWithHTTPClient(client *http.Client) *MwAddParams {
	var ()
	return &MwAddParams{
		HTTPClient: client,
	}
}

/*MwAddParams contains all the parameters to send to the API endpoint
for the mw add operation typically these are written to a http.Request
*/
type MwAddParams struct {

	/*APIID*/
	APIID *string
	/*StoreOnly*/
	StoreOnly *bool
	/*Uploadfile*/
	UploadFile runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the mw add params
func (o *MwAddParams) WithTimeout(timeout time.Duration) *MwAddParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the mw add params
func (o *MwAddParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the mw add params
func (o *MwAddParams) WithContext(ctx context.Context) *MwAddParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the mw add params
func (o *MwAddParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the mw add params
func (o *MwAddParams) WithHTTPClient(client *http.Client) *MwAddParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the mw add params
func (o *MwAddParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIID adds the aPIID to the mw add params
func (o *MwAddParams) WithAPIID(aPIID *string) *MwAddParams {
	o.SetAPIID(aPIID)
	return o
}

// SetAPIID adds the apiId to the mw add params
func (o *MwAddParams) SetAPIID(aPIID *string) {
	o.APIID = aPIID
}

// WithStoreOnly adds the storeOnly to the mw add params
func (o *MwAddParams) WithStoreOnly(storeOnly *bool) *MwAddParams {
	o.SetStoreOnly(storeOnly)
	return o
}

// SetStoreOnly adds the storeOnly to the mw add params
func (o *MwAddParams) SetStoreOnly(storeOnly *bool) {
	o.StoreOnly = storeOnly
}

// WithUploadFile adds the uploadfile to the mw add params
func (o *MwAddParams) WithUploadFile(uploadfile runtime.NamedReadCloser) *MwAddParams {
	o.SetUploadFile(uploadfile)
	return o
}

// SetUploadFile adds the uploadfile to the mw add params
func (o *MwAddParams) SetUploadFile(uploadfile runtime.NamedReadCloser) {
	o.UploadFile = uploadfile
}

// WriteToRequest writes these params to a swagger request
func (o *MwAddParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIID != nil {

		// query param api_id
		var qrAPIID string
		if o.APIID != nil {
			qrAPIID = *o.APIID
		}
		qAPIID := qrAPIID
		if qAPIID != "" {
			if err := r.SetQueryParam("api_id", qAPIID); err != nil {
				return err
			}
		}

	}

	if o.StoreOnly != nil {

		// query param store_only
		var qrStoreOnly bool
		if o.StoreOnly != nil {
			qrStoreOnly = *o.StoreOnly
		}
		qStoreOnly := swag.FormatBool(qrStoreOnly)
		if qStoreOnly != "" {
			if err := r.SetQueryParam("store_only", qStoreOnly); err != nil {
				return err
			}
		}

	}

	// form file param uploadfile
	if err := r.SetFileParam("uploadfile", o.UploadFile); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
