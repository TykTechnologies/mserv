// Code generated by go-swagger; DO NOT EDIT.

package mw

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/TykTechnologies/mserv/mservclient/models"
)

// MwAddReader is a Reader for the MwAdd structure.
type MwAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MwAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMwAddOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewMwAddInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/mw] mwAdd", response, response.Code())
	}
}

// NewMwAddOK creates a MwAddOK with default headers values
func NewMwAddOK() *MwAddOK {
	return &MwAddOK{}
}

/*
MwAddOK describes a response with status code 200, with default header values.

Response that only includes the ID of the middleware as `BundleID` in the `Payload`
*/
type MwAddOK struct {
	Payload *MwAddOKBody
}

// IsSuccess returns true when this mw add o k response has a 2xx status code
func (o *MwAddOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this mw add o k response has a 3xx status code
func (o *MwAddOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mw add o k response has a 4xx status code
func (o *MwAddOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this mw add o k response has a 5xx status code
func (o *MwAddOK) IsServerError() bool {
	return false
}

// IsCode returns true when this mw add o k response a status code equal to that given
func (o *MwAddOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the mw add o k response
func (o *MwAddOK) Code() int {
	return 200
}

func (o *MwAddOK) Error() string {
	return fmt.Sprintf("[POST /api/mw][%d] mwAddOK  %+v", 200, o.Payload)
}

func (o *MwAddOK) String() string {
	return fmt.Sprintf("[POST /api/mw][%d] mwAddOK  %+v", 200, o.Payload)
}

func (o *MwAddOK) GetPayload() *MwAddOKBody {
	return o.Payload
}

func (o *MwAddOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MwAddOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMwAddInternalServerError creates a MwAddInternalServerError with default headers values
func NewMwAddInternalServerError() *MwAddInternalServerError {
	return &MwAddInternalServerError{}
}

/*
MwAddInternalServerError describes a response with status code 500, with default header values.

Generic error specified by `Status` and `Error` fields
*/
type MwAddInternalServerError struct {
	Payload *models.Payload
}

// IsSuccess returns true when this mw add internal server error response has a 2xx status code
func (o *MwAddInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mw add internal server error response has a 3xx status code
func (o *MwAddInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mw add internal server error response has a 4xx status code
func (o *MwAddInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this mw add internal server error response has a 5xx status code
func (o *MwAddInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this mw add internal server error response a status code equal to that given
func (o *MwAddInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the mw add internal server error response
func (o *MwAddInternalServerError) Code() int {
	return 500
}

func (o *MwAddInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/mw][%d] mwAddInternalServerError  %+v", 500, o.Payload)
}

func (o *MwAddInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/mw][%d] mwAddInternalServerError  %+v", 500, o.Payload)
}

func (o *MwAddInternalServerError) GetPayload() *models.Payload {
	return o.Payload
}

func (o *MwAddInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Payload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
MwAddOKBody mw add o k body
swagger:model MwAddOKBody
*/
type MwAddOKBody struct {

	// error
	Error string `json:"Error,omitempty"`

	// payload
	Payload *MwAddOKBodyPayload `json:"Payload,omitempty"`

	// status
	Status string `json:"Status,omitempty"`
}

// Validate validates this mw add o k body
func (o *MwAddOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MwAddOKBody) validatePayload(formats strfmt.Registry) error {
	if swag.IsZero(o.Payload) { // not required
		return nil
	}

	if o.Payload != nil {
		if err := o.Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mwAddOK" + "." + "Payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mwAddOK" + "." + "Payload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mw add o k body based on the context it is used
func (o *MwAddOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MwAddOKBody) contextValidatePayload(ctx context.Context, formats strfmt.Registry) error {

	if o.Payload != nil {

		if swag.IsZero(o.Payload) { // not required
			return nil
		}

		if err := o.Payload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mwAddOK" + "." + "Payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mwAddOK" + "." + "Payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MwAddOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MwAddOKBody) UnmarshalBinary(b []byte) error {
	var res MwAddOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MwAddOKBodyPayload mw add o k body payload
swagger:model MwAddOKBodyPayload
*/
type MwAddOKBodyPayload struct {

	// bundle ID
	BundleID string `json:"BundleID,omitempty"`
}

// Validate validates this mw add o k body payload
func (o *MwAddOKBodyPayload) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mw add o k body payload based on context it is used
func (o *MwAddOKBodyPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MwAddOKBodyPayload) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MwAddOKBodyPayload) UnmarshalBinary(b []byte) error {
	var res MwAddOKBodyPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
