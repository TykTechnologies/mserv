// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/TykTechnologies/mserv/mservclient/models"
)

// HealthReader is a Reader for the Health structure.
type HealthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HealthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHealthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewHealthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /health] health", response, response.Code())
	}
}

// NewHealthOK creates a HealthOK with default headers values
func NewHealthOK() *HealthOK {
	return &HealthOK{}
}

/*
HealthOK describes a response with status code 200, with default header values.

Health status response
*/
type HealthOK struct {
	Payload *HealthOKBody
}

// IsSuccess returns true when this health o k response has a 2xx status code
func (o *HealthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this health o k response has a 3xx status code
func (o *HealthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health o k response has a 4xx status code
func (o *HealthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this health o k response has a 5xx status code
func (o *HealthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this health o k response a status code equal to that given
func (o *HealthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the health o k response
func (o *HealthOK) Code() int {
	return 200
}

func (o *HealthOK) Error() string {
	return fmt.Sprintf("[GET /health][%d] healthOK  %+v", 200, o.Payload)
}

func (o *HealthOK) String() string {
	return fmt.Sprintf("[GET /health][%d] healthOK  %+v", 200, o.Payload)
}

func (o *HealthOK) GetPayload() *HealthOKBody {
	return o.Payload
}

func (o *HealthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(HealthOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHealthInternalServerError creates a HealthInternalServerError with default headers values
func NewHealthInternalServerError() *HealthInternalServerError {
	return &HealthInternalServerError{}
}

/*
HealthInternalServerError describes a response with status code 500, with default header values.

Health status response
*/
type HealthInternalServerError struct {
	Payload *HealthInternalServerErrorBody
}

// IsSuccess returns true when this health internal server error response has a 2xx status code
func (o *HealthInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this health internal server error response has a 3xx status code
func (o *HealthInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health internal server error response has a 4xx status code
func (o *HealthInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this health internal server error response has a 5xx status code
func (o *HealthInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this health internal server error response a status code equal to that given
func (o *HealthInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the health internal server error response
func (o *HealthInternalServerError) Code() int {
	return 500
}

func (o *HealthInternalServerError) Error() string {
	return fmt.Sprintf("[GET /health][%d] healthInternalServerError  %+v", 500, o.Payload)
}

func (o *HealthInternalServerError) String() string {
	return fmt.Sprintf("[GET /health][%d] healthInternalServerError  %+v", 500, o.Payload)
}

func (o *HealthInternalServerError) GetPayload() *HealthInternalServerErrorBody {
	return o.Payload
}

func (o *HealthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(HealthInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
HealthInternalServerErrorBody health internal server error body
swagger:model HealthInternalServerErrorBody
*/
type HealthInternalServerErrorBody struct {

	// error
	Error string `json:"Error,omitempty"`

	// payload
	Payload *models.HReport `json:"Payload,omitempty"`

	// status
	Status string `json:"Status,omitempty"`
}

// Validate validates this health internal server error body
func (o *HealthInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HealthInternalServerErrorBody) validatePayload(formats strfmt.Registry) error {
	if swag.IsZero(o.Payload) { // not required
		return nil
	}

	if o.Payload != nil {
		if err := o.Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthInternalServerError" + "." + "Payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthInternalServerError" + "." + "Payload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this health internal server error body based on the context it is used
func (o *HealthInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HealthInternalServerErrorBody) contextValidatePayload(ctx context.Context, formats strfmt.Registry) error {

	if o.Payload != nil {

		if swag.IsZero(o.Payload) { // not required
			return nil
		}

		if err := o.Payload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthInternalServerError" + "." + "Payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthInternalServerError" + "." + "Payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *HealthInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HealthInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res HealthInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
HealthOKBody health o k body
swagger:model HealthOKBody
*/
type HealthOKBody struct {

	// error
	Error string `json:"Error,omitempty"`

	// payload
	Payload *models.HReport `json:"Payload,omitempty"`

	// status
	Status string `json:"Status,omitempty"`
}

// Validate validates this health o k body
func (o *HealthOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HealthOKBody) validatePayload(formats strfmt.Registry) error {
	if swag.IsZero(o.Payload) { // not required
		return nil
	}

	if o.Payload != nil {
		if err := o.Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthOK" + "." + "Payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthOK" + "." + "Payload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this health o k body based on the context it is used
func (o *HealthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HealthOKBody) contextValidatePayload(ctx context.Context, formats strfmt.Registry) error {

	if o.Payload != nil {

		if swag.IsZero(o.Payload) { // not required
			return nil
		}

		if err := o.Payload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthOK" + "." + "Payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthOK" + "." + "Payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *HealthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HealthOKBody) UnmarshalBinary(b []byte) error {
	var res HealthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
